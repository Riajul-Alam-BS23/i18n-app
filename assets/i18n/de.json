{
  "app": {
    "title": "Internationalisierungs-App",
    "welcome": "Willkommen in unserer mehrsprachigen Anwendung"
  },
  "nav": {
    "home": "Startseite",
    "faq": "FAQ",
    "about": "Über uns",
    "documentation": "Dokumentation"
  },
  "home": {
    "title": "Startseite",
    "subtitle": "Willkommen auf der Startseite",
    "description": "Dies ist eine Demonstration der Internationalisierung (i18n) in Angular mit ngx-translate. Sie können zwischen verschiedenen Sprachen wechseln, indem Sie den Sprachauswahl in der Navigationsleiste verwenden.",
    "features": {
      "title": "Hauptmerkmale",
      "feature1": "Mehrsprachige Unterstützung",
      "feature2": "Dynamischer Sprachwechsel",
      "feature3": "Einfache Integration",
      "feature4": "Übersetzungsverwaltung"
    },
    "cta": "Mehr erfahren"
  },
  "faq": {
    "title": "Häufig gestellte Fragen",
    "subtitle": "Finden Sie Antworten auf häufige Fragen",
    "q1": {
      "question": "Was ist Internationalisierung?",
      "answer": "Internationalisierung (i18n) ist der Prozess der Gestaltung und Vorbereitung Ihrer Anwendung, damit sie in verschiedenen Sprachen und Regionen verwendet werden kann."
    },
    "q2": {
      "question": "Wie ändere ich die Sprache?",
      "answer": "Verwenden Sie die Sprachauswahl in der Navigationsleiste, um zwischen Englisch, Deutsch und Bengali zu wechseln."
    },
    "q3": {
      "question": "Ist es einfach, neue Sprachen hinzuzufügen?",
      "answer": "Ja! Erstellen Sie einfach eine neue JSON-Datei im Ordner assets/i18n mit Ihren Übersetzungen."
    },
    "q4": {
      "question": "Beeinträchtigt es die Leistung?",
      "answer": "Nein, ngx-translate ist leichtgewichtig und lädt effizient nur die erforderlichen Sprachdateien."
    }
  },
  "about": {
    "title": "Über uns",
    "subtitle": "Erfahren Sie mehr über unsere Anwendung",
    "description": "Diese Anwendung demonstriert die Implementierung der Internationalisierung in Angular mithilfe der ngx-translate-Bibliothek. Sie zeigt, wie man eine mehrsprachige Webanwendung mit nahtlosem Sprachwechsel erstellt.",
    "mission": {
      "title": "Unsere Mission",
      "text": "Ein umfassendes Beispiel für die Implementierung von i18n in Angular-Anwendungen bereitzustellen, damit Entwickler einfacher global zugängliche Anwendungen erstellen können."
    },
    "technology": {
      "title": "Technologie-Stack",
      "angular": "Angular - Frontend-Framework",
      "ngxTranslate": "ngx-translate - Übersetzungsbibliothek",
      "typescript": "TypeScript - Programmiersprache",
      "scss": "SCSS - Styling"
    },
    "contact": "Kontaktieren Sie uns"
  },
  "footer": {
    "copyright": "© 2025 i18n App. Alle Rechte vorbehalten.",
    "language": "Sprache"
  },
  "documentation": {
    "title": "i18n Implementierungsleitfaden",
    "subtitle": "Vollständiger Leitfaden zur Internationalisierung in dieser Angular-Anwendung",
    "toc": {
      "title": "Inhaltsverzeichnis",
      "overview": "Übersicht",
      "features": "Hauptfunktionen",
      "setup": "Einrichtung & Konfiguration",
      "usage": "Verwendung",
      "architecture": "Architektur",
      "languages": "Unterstützte Sprachen"
    },
    "sections": {
      "overview": {
        "title": "Übersicht",
        "intro": "Diese Anwendung demonstriert eine vollständige Implementierung der Internationalisierung (i18n) mit der ngx-translate-Bibliothek für Angular. Sie bietet mehrsprachige Unterstützung mit dynamischem Sprachwechsel, persistenter Sprachauswahl und Browser-Spracherkennung.",
        "libraries": "Verwendete Bibliotheken",
        "coreDesc": "Kernübersetzungsfunktionalität",
        "loaderDesc": "HTTP-Loader für Übersetzungsdateien"
      },
      "features": {
        "title": "Hauptfunktionen",
        "multilang": "Mehrsprachige Unterstützung",
        "multilangDesc": "Unterstützung für Englisch, Deutsch und Bengali",
        "dynamic": "Dynamischer Wechsel",
        "dynamicDesc": "Sprachen sofort ohne Seitenaktualisierung wechseln",
        "persistent": "Persistente Auswahl",
        "persistentDesc": "Sprachpräferenz in localStorage gespeichert",
        "browser": "Browser-Erkennung",
        "browserDesc": "Erkennt und verwendet automatisch die Browser-Sprache"
      },
      "setup": {
        "title": "Einrichtung & Konfiguration",
        "step1": {
          "title": "Schritt 1: TranslateModule konfigurieren",
          "desc": "Richten Sie das TranslateModule in app.module.ts mit der benutzerdefinierten HTTP-Loader-Factory-Funktion ein."
        },
        "step2": {
          "title": "Schritt 2: Übersetzungs-Loader erstellen",
          "desc": "Implementieren Sie einen benutzerdefinierten Übersetzungs-Loader, der JSON-Dateien aus dem Assets-Ordner mit Cache-Busting lädt."
        },
        "step3": {
          "title": "Schritt 3: In App-Komponente initialisieren",
          "desc": "Richten Sie den TranslateService in der Haupt-App-Komponente ein, um die Standardsprache zu verwalten und gespeicherte Präferenzen zu laden."
        },
        "step4": {
          "title": "Schritt 4: Sprachumschalter erstellen",
          "desc": "Erstellen Sie eine Komponente, mit der Benutzer über eine Dropdown-Auswahl zwischen Sprachen wechseln können."
        }
      },
      "usage": {
        "title": "Übersetzungen verwenden",
        "template": {
          "title": "In Vorlagen",
          "desc": "Verwenden Sie die Übersetzungspipe in Ihren HTML-Vorlagen, um übersetzten Text anzuzeigen."
        },
        "files": {
          "title": "Übersetzungsdateien",
          "desc": "Übersetzungsdateien werden in src/assets/i18n/ als JSON-Dateien gespeichert (en.json, de.json, bn.json)."
        },
        "note": {
          "title": "Wichtiger Hinweis:",
          "desc": "Alle Übersetzungsdateien müssen die gleiche Struktur mit übereinstimmenden Schlüsseln haben, damit Übersetzungen in allen Sprachen korrekt funktionieren."
        }
      },
      "architecture": {
        "title": "Systemarchitektur",
        "intro": "Das i18n-System folgt einer geschichteten Architektur zum Laden und Verwalten von Übersetzungen:",
        "components": {
          "app": "App-Komponente",
          "appDesc": "Initialisiert Spracheinstellungen und lädt gespeicherte Präferenzen",
          "translate": "TranslateService",
          "translateDesc": "Verwaltet die aktuelle Sprache und stellt Übersetzungsmethoden bereit",
          "loader": "HTTP-Loader",
          "loaderDesc": "Lädt Übersetzungs-JSON-Dateien vom Server",
          "files": "Übersetzungsdateien",
          "filesDesc": "JSON-Dateien mit Schlüssel-Wert-Paaren für jede Sprache"
        }
      },
      "languages": {
        "title": "Unterstützte Sprachen",
        "intro": "Diese Anwendung unterstützt derzeit drei Sprachen:",
        "code": "Code",
        "status": "Status",
        "active": "Aktiv",
        "adding": {
          "title": "Eine neue Sprache hinzufügen",
          "desc": "Um Unterstützung für eine neue Sprache hinzuzufügen:",
          "step1": "Erstellen Sie eine neue JSON-Datei in src/assets/i18n/ (z.B. fr.json für Französisch)",
          "step2": "Kopieren Sie die Struktur aus en.json und übersetzen Sie alle Werte",
          "step3": "Fügen Sie die Sprache zur Sprachumschalter-Komponente hinzu"
        }
      },
      "bestPractices": {
        "title": "Best Practices",
        "item1": "Verwenden Sie immer Übersetzungsschlüssel anstelle von hartcodiertem Text in Vorlagen",
        "item2": "Halten Sie die Struktur der Übersetzungsdateien in allen Sprachen konsistent",
        "item3": "Verwenden Sie hierarchische Schlüssel (z.B. 'home.title') für bessere Organisation",
        "item4": "Testen Sie alle Sprachen nach Änderungen, um sicherzustellen, dass nichts kaputt ist"
      },
      "resources": {
        "title": "Zusätzliche Ressourcen",
        "link1": "ngx-translate/core - Offizielle Dokumentation",
        "link2": "Angular i18n Leitfaden - Offizieller Angular-Leitfaden",
        "link3": "ngx-translate/http-loader - HTTP-Loader-Dokumentation"
      }
    }
  }
}
